//@ts-nocheck

import { useDispatch, useSelector } from "react-redux";
import { setUserHeroViewGrid, setUserHeroViewLines } from "../../../redux/userHeroViewSlice/userHeroViewSlice";
import { useEffect } from "react";

// import { useDispatch, useSelector } from "react-redux";

// import {useDispatch, useSelector} from "react-redux";
// import {useEffect} from "react";
// import { initCloudStorage } from '@telegram-apps/sdk';

export default function ChangeButton() {

    const dispatch = useDispatch()
    const userHeroView = useSelector(state => state.userHeroView.view)

    const changeView = () => {
        if (userHeroView === 'Grid') {
            dispatch(setUserHeroViewLines())
        } else {
            dispatch(setUserHeroViewGrid())
        }
    }

    // useEffect(() => {
    //     console.log(userHeroView);
    // }, [userHeroView]);

    if (userHeroView === 'Grid'){
        return (
            <div onClick={changeView} style={{cursor: 'pointer'}}>
                <svg height={41} width={52} fill="none" viewBox="0 0 52 41" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.00014 8.16324V0.942871H8.25751M8.25751 39.9999H1.00014V32.7796M43.7434 40H51V32.7796M43.7434 0.942923H51V8.16329" stroke="#B28E4C" strokeMiterlimit="20" strokeLinecap="round"/>
                    <path d="M15.6219 10.2444C15.8123 10.0623 16.0391 9.91775 16.2892 9.81907C16.5393 9.72039 16.8078 9.66957 17.0789 9.66957L23.0206 9.66957C23.289 9.66838 23.5549 9.71733 23.8031 9.81361C24.0513 9.90988 24.2768 10.0516 24.4665 10.2305C24.6563 10.4094 24.8066 10.622 24.9087 10.856C25.0108 11.0899 25.0627 11.3407 25.0615 11.5937L25.0615 17.1956C25.064 17.4483 25.0131 17.6989 24.9117 17.9329C24.8103 18.1668 24.6604 18.3793 24.4709 18.558C24.2813 18.7367 24.0559 18.878 23.8078 18.9736C23.5597 19.0692 23.2938 19.1172 23.0258 19.1148L17.0583 19.1197C16.7899 19.1209 16.5239 19.0719 16.2758 18.9757C16.0276 18.8794 15.8021 18.7377 15.6123 18.5588C15.4226 18.3799 15.2723 18.1673 15.1702 17.9333C15.0681 17.6993 15.0161 17.4486 15.0174 17.1956L15.0122 11.6181C15.0122 11.3624 15.0661 11.1093 15.1708 10.8735C15.2755 10.6377 15.4288 10.4238 15.6219 10.2444ZM15.6477 21.9109C15.8381 21.7288 16.0649 21.5843 16.315 21.4856C16.5652 21.3869 16.8336 21.3361 17.1048 21.3361L22.9948 21.3166C23.2631 21.3154 23.5291 21.3644 23.7773 21.4606C24.0255 21.5569 24.2509 21.6986 24.4407 21.8775C24.6305 22.0564 24.7807 22.269 24.8829 22.503C24.985 22.737 25.0369 22.9877 25.0356 23.2407L25.0356 28.8621C25.0369 29.1151 24.985 29.3659 24.8829 29.5998C24.7807 29.8338 24.6305 30.0464 24.4407 30.2253C24.2509 30.4042 24.0255 30.5459 23.7773 30.6422C23.5291 30.7385 23.2631 30.7874 22.9948 30.7862L17.0789 30.7911C16.8108 30.7914 16.5453 30.7418 16.2976 30.6452C16.0498 30.5486 15.8247 30.4069 15.6352 30.2282C15.4456 30.0494 15.2953 29.8372 15.1928 29.6036C15.0904 29.3701 15.0378 29.1197 15.0381 28.867L15.0381 23.2651C15.0315 22.7508 15.2414 22.2551 15.6219 21.8865L15.6477 21.9109ZM27.9962 10.2687C28.187 10.0873 28.4139 9.94312 28.6639 9.84449C28.9139 9.74585 29.1821 9.69469 29.4532 9.69393L35.3484 9.66957C35.6164 9.66929 35.882 9.71887 36.1297 9.81547C36.3774 9.91207 36.6025 10.0538 36.7921 10.2325C36.9817 10.4112 37.132 10.6235 37.2345 10.857C37.3369 11.0906 37.3895 11.3409 37.3892 11.5937L37.3892 17.1956C37.394 17.4527 37.3438 17.7081 37.2417 17.9465C37.1395 18.185 36.9874 18.4016 36.7946 18.5834C36.6017 18.7653 36.3719 18.9086 36.119 19.0049C35.8661 19.1013 35.5952 19.1486 35.3225 19.1441L29.4325 19.1441C29.1641 19.1452 28.8982 19.0963 28.65 19C28.4018 18.9037 28.1763 18.7621 27.9866 18.5832C27.7968 18.4042 27.6465 18.1917 27.5444 17.9577C27.4423 17.7237 27.3904 17.4729 27.3916 17.2199L27.3865 11.5937C27.3865 11.3381 27.4404 11.085 27.545 10.8492C27.6497 10.6133 27.803 10.3995 27.9962 10.22L27.9962 10.2687ZM27.9961 21.9596C28.1852 21.776 28.4118 21.6304 28.6622 21.5316C28.9127 21.4328 29.1817 21.3829 29.4532 21.3848L35.369 21.341C35.6417 21.3364 35.9126 21.3838 36.1655 21.4801C36.4185 21.5764 36.6482 21.7198 36.8411 21.9016C37.0339 22.0834 37.186 22.3 37.2882 22.5385C37.3903 22.7769 37.4405 23.0323 37.4357 23.2894L37.415 28.8426C37.4156 29.0948 37.3634 29.3446 37.2613 29.5777C37.1592 29.8108 37.0092 30.0226 36.8201 30.2009C36.6309 30.3793 36.4063 30.5206 36.1591 30.6169C35.9118 30.7131 35.6468 30.7624 35.3794 30.7619L29.4377 30.7619C29.1649 30.7664 28.894 30.7191 28.6411 30.6228C28.3882 30.5264 28.1585 30.3831 27.9656 30.2012C27.7727 30.0194 27.6207 29.8028 27.5185 29.5644C27.4164 29.3259 27.3662 29.0705 27.371 28.8134L27.3658 23.2651C27.3637 23.0092 27.4167 22.7555 27.5215 22.5194C27.6263 22.2833 27.7807 22.0697 27.9755 21.8914L27.9961 21.9596Z" stroke="#B0B0B0" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
            </div>
        )
    } else {
        return (
            <div onClick={changeView} style={{cursor: 'pointer'}}>
                <svg height={41} width={52} fill="none" viewBox="0 0 52 41" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.00014 8.25738V1H8.25751M8.25751 40.2573H1.00014V32.9999M43.7434 40.2573H51V32.9999M43.7434 1.00005H51V8.25743" stroke="#B28E4C" strokeMiterlimit="20" strokeLinecap="round"/>
                    <rect x="14.5" y="9.5" width="22" height="10" rx="1.5" stroke="#B0B0B0"/>
                    <rect x="14.5" y="22.5" width="22" height="10" rx="1.5" stroke="#B0B0B0"/>
                </svg>
            </div>
        )
    }

}